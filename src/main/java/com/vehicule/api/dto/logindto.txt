public class LoginResponseDTO {
    private String token;
    private Long idUser;

    // Constructeur, getters, setters
}


import org.springframework.http.ResponseEntity;

@PostMapping("/auth/login")
public ResponseEntity<?> login(String mail, String password) {
    try {
        Authentication authentication =
                authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(mail, password));
        User user = userRepository.findByEmail(mail);

        // Vérifiez si l'utilisateur est activé, etc., selon vos besoins

        String token = jwtUtil.createToken(user);

        // Créez et retournez le DTO avec le token et l'ID de l'utilisateur
        LoginResponseDTO responseDTO = new LoginResponseDTO();
        responseDTO.setToken(token);
        responseDTO.setIdUser(user.getId());

        return ResponseEntity.ok(responseDTO);
    } catch (Exception e) {
        return ResponseEntity.status(401).body("Erreur d'authentification : " + e.getMessage());
    }
}


axios.post('/auth/login', { mail: 'user@example.com', password: 'password' })
    .then(response => {
        // Stockez le token et l'ID de l'utilisateur dans le local storage
        localStorage.setItem('token', response.data.token);
        localStorage.setItem('idUser', response.data.idUser);

        // Autres actions après le succès de la connexion
        // ...
    })
    .catch(error => {
        // Gérer les erreurs de connexion
        console.error('Erreur de connexion:', error);
    });
